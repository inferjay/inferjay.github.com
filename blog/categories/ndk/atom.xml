<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: NDK | 脉脉不得语的技术博客]]></title>
  <link href="http://www.inferjay.com/blog/categories/ndk/atom.xml" rel="self"/>
  <link href="http://www.inferjay.com/"/>
  <updated>2016-02-29T21:30:58+08:00</updated>
  <id>http://www.inferjay.com/</id>
  <author>
    <name><![CDATA[inferjay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle Experimental Plugin User Guide]]></title>
    <link href="http://www.inferjay.com/blog/2015/08/16/gradle-experimental-plugin-user-guide/"/>
    <updated>2015-08-16T01:07:13+08:00</updated>
    <id>http://www.inferjay.com/blog/2015/08/16/gradle-experimental-plugin-user-guide</id>
    <content type="html"><![CDATA[<h3 id="contents">Contents</h3>

<ol>
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#requirements">Requirements</a></li>
  <li><a href="#migrating-from-traditional-android-gradle-plugin">Migrating from Traditional Android Gradle Plugin</a></li>
  <li><a href="ndk-integration">Ndk Integration</a>
    <ol>
      <li><a href="#known-linitations">Known Limitations</a></li>
      <li><a href="#samples">Samples</a></li>
    </ol>
  </li>
</ol>

<h3 id="introduction">Introduction</h3>

<p>The new experimental plugin is based on Gradle’s new component model mechanism, while allows significant reduction in configuration time. It also includes NDK integration for building JNI applications. This user guides provides details on how to use it and highlights the difference between the new plugin and the original plugin.</p>

<p><strong>WARNING:</strong> Note that this is plugin is at the experimental stage. The Gradle API for the new component model is not final, which means it’ll only work with a specific version of Gradle until the APIs are final.</p>

<p>Additionally, the DSL is likely change significantly, as APIs to create the DSL are finalized.</p>

<p>This is a very early preview of the plugin for feedback on performance and NDK integration.</p>

<!--more-->

<h3 id="requirements">Requirements</h3>

<ul>
  <li>Gradle 2.5 only</li>
  <li>Android NDK r10e (if you are using NDK)</li>
  <li>SDK with Build Tools at least version 19.0.0 and we aim to minimize the amount of changes needed for the migration process in the future. Some features may require a more recent version.</li>
</ul>

<h3 id="migrating-from-traditional-android-gradle-plugin">Migrating from Traditional Android Gradle Plugin</h3>

<p>A typical Android Studio project may have a directory structure as follows. File that needs to be change is highlighted in red:</p>

<p>There are some significant changes in the DSL between the new plugin and the traditional one.</p>

<p><img src="/images/notes_images/gradle-project-folder-tree.png" alt="image" /></p>

<p><strong>./gradle/wrapper/gradle-wrapper.properties</strong></p>

<ul>
  <li>The new plugin supports only gradle-2.5.</li>
</ul>

<p><code>
#Wed Apr 10 15:27:10 PDT 2013
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-2.5-all.zip
</code></p>

<p><strong>./build.gradle</strong></p>

<ul>
  <li>Classpath for the plugin is com.android.tools.build:gradle-experimental instead of com.android.tools.build:gradle.</li>
  <li>The current version is 0.2.0.</li>
</ul>

<p><img src="/images/notes_images/gradle-project-top-level-gradle-build-file-content.png" alt="image" /></p>

<p><strong>./app/build.gradle</strong>
There are significant changes to the DSL of the plugin.  We understand that many of the changes are frustrating and seem unnecessary, and our goal is to remove some of these current changes to minimize the migration process from the traditional plugin in the future.</p>

<p>DSL Changes:</p>

<ul>
  <li>Plugin name is <code>com.android.model.application</code> instead of <code>com.android.application</code>.  Or use <code>apply plugin: 'com.android.model.library'</code> if you want to create an Android aar library.</li>
  <li>Configuration is wrapped with the <code>model { }</code> block</li>
  <li>Most properties require the = operator</li>
  <li>Adding elements to a Collection should be done using the += operator.</li>
</ul>

<p>Current DSL Limitations that will hopefully go away:</p>

<ul>
  <li>buildTypes, productFlavors and signingConfigs must be place outside of the  <code>android { }</code> block.</li>
  <li>Nested options within the <code>android { }</code> block must be configured using the with keyword.</li>
  <li>Properties are only set with their direct types only, with no way to accept other types and adapting them. For instance:
    <ul>
      <li>Properties of type File accepts only File instead of File and String objects.</li>
      <li>minSdkVersion cannot directly receive either an integer or string (for codename).</li>
    </ul>
  </li>
  <li>Creating a buildType or productFlavor requires calling the create method.  Modifying an existing one such as the release and debug buildType can be done using the just the name.</li>
  <li>The DSL for modifying variants and their tasks is very, very limited right now.</li>
</ul>

<p><img src="/images/notes_images/gradle-project-app-build-gradle.png" alt="image" /></p>

<h3 id="ndk-integration">Ndk Integration</h3>

<p>The experimental plugin comes with NDK integration for creating native applications.  To use the NDK integration:</p>

<ul>
  <li>Use the SDK Manager inside Studio to download the NDK.</li>
  <li>Set ndk.dir in local.properties or the <code>ANDROID_NDK_HOME</code> environment variable to the directory containing the NDK.</li>
  <li>Add an <code>android.ndk</code> block to the model in build.gradle. </li>
</ul>

<h3 id="known-limitations">Known Limitations</h3>

<p>There’s no support for NDK-only modules. The only supported project types are hybrid app projects and hybrid Library Projects.</p>

<ul>
  <li>Consumed Library project don’t impact compilation of jni code in the consuming project (ie the AAR so files are simply packaged in the APK)</li>
  <li>No support for creating and depending on static libraries</li>
  <li>No support for using a NDK modules like cpu_features</li>
  <li>No support for integrating external build systems.</li>
</ul>

<p>The build.gradle of a simple NDK application may look like this:</p>

<p><img src="/images/notes_images/gradke-project-android-ndk-model-name.png" alt="image" /></p>

<p>*Note that the moduleName is <strong>required</strong>.  It determines the name of the resulting native library.</p>

<p>By default, it will look in src/main/jni for C/C++ file.  Configure android.sources to change the source directory.</p>

<p><code>
model {
    android {
        compileSdkVersion = 22
        buildToolsVersion = "22.0.1"
    }
    android.ndk {
        moduleName = "native"
    }
    android.sources {
        main {
            jni {
                source {
                    srcDir 'src'
                }
            }
        }
    }
}
</code></p>

<p>Various build options can be set within the <code>android.ndk { }</code> block.  For example, </p>

<p>```
model {
    android {
        compileSdkVersion = 22
        buildToolsVersion = “22.0.1”
    }
    android.ndk {
        // All configurations that can be changed in android.ndk.
        moduleName = “native”
        toolchain = “clang”
        toolchainVersion = “3.5”
        // Note that CFlags has a capital C, which is inconsistent with
        // the naming convention of other properties.  This is a
        // technical limitation that will be resolved
        CFlags += “-DCUSTOM_DEFINE”
        cppFlags += “-DCUSTOM_DEFINE”
        ldFlags += “-L/custom/lib/path”
        ldLibs += “log”
        stl = “stlport_static”
    }
    android.buildTypes {
        release {
            ndk.with {
                debuggable = true
            }
        }
    }
    android.productFlavors {
        create(“arm”) {
            ndk.with {
                // You can customize the NDK configurations for each
                // productFlavors and buildTypes.
                abiFilters += “armeabi-v7a”
            }
        }
        create(“fat”) {
            // If ndk.abiFilters is not configured, the application
            // compile and package all suppported ABI.
        }
    }</p>

<pre><code>// You can modify the NDK configuration for each variant.
components.android {
    binaries.afterEach { binary -&gt;
        binary.mergedNdkConfig.cppFlags.add(
                "-DVARIANT=\"" + binary.name + "\"")
    }
} }		 ```
</code></pre>

<h3 id="samples">Samples</h3>

<p>Additional samples can be found at <a href="https://github.com/googlesamples/android-ndk">https://github.com/googlesamples/android-ndk</a>.</p>

<p>原文链接：<a href="http://tools.android.com/tech-docs/new-build-system/gradle-experimental">http://tools.android.com/tech-docs/new-build-system/gradle-experimental</a></p>

<hr />
<p>版权声明：版权归原网站所有。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android NDK Preview]]></title>
    <link href="http://www.inferjay.com/blog/2015/08/16/android-ndk-preview/"/>
    <updated>2015-08-16T00:48:52+08:00</updated>
    <id>http://www.inferjay.com/blog/2015/08/16/android-ndk-preview</id>
    <content type="html"><![CDATA[<p>We’ve just released another update to Android Studio 1.3’s canary channel, Release Candidate 1.</p>

<p>This build contains a big new feature: Android NDK support, with support for editing, running and debugging C and C++ code! Note however that NDK support is only preview quality, and will remain in preview status for the upcoming final 1.3 release. There are many significant limitations (described below), but we hope that the preview will be useful for many Android NDK developers even in its current state!</p>

<h3 id="limitations">Limitations</h3>

<p>First, the Android NDK support only works with the new experimental Gradle plugin for Android (which in turn requires Gradle 2.5, released yesterday.)</p>

<p>While the new gradle plugin delivers some major performance improvements (and Android NDK build support), note that it also requires changes to the build file “DSL” (the way your build is described in your build.gradle files.) Not only will you need to modify your build.gradle files (a process we hope to automate before the plugin graduates from experimental to stable), but we anticipate making some additional incompatible changes along the way.</p>

<!--more-->

<p>Second, note also that Android Studio has not yet been updated to fully handle the experimental plugin. This means that for example the Project Structure Dialog, and various quick fixes which automatically update the build data, do not work correctly. You’ll need to edit your build.gradle files manually to configure your projects. As another example, the various templates which update the build files (such as New Module), have not yet been updated.</p>

<p>Finally, there are still some known bugs in this build; when debugging with LLDB breakpoints do not always work on Windows; if you run into this, you can switch to GDB debugging as a temporary workaround.</p>

<h3 id="bundled-android-ndk">Bundled Android NDK</h3>

<p>Historically, the Android NDK was distributed separately from the Android SDK, as a giant .zip file download, and installed in a separate location from where the Android SDK resides.</p>

<p>In this release we’ve tried to unify this; the NDK should now be installed under the SDK home in “ndk-bundle”. We’ve updated the IDE built-in SDK Manager to let you install the NDK in the right place, and the Project Structure Dialog’s SDK Location panel (where you can edit the locations), now also offers a quick link to install it directly; just click on the Download hyperlink shown below:</p>

<p>Note that the NDK is a large download (~1 GB!) so unless you have a really great network connection, prepare to be patient…</p>

<p>Speaking of large downloads, note also that the IDE update patches from previous 1.3 builds to this one are really large: not only does this build contain all the new code to support Android NDK development, but it also contains LLDB binaries (~200 MB uncompressed). This is just a temporary situation; we’ll move these into the NDK.</p>

<h3 id="how-to-get-started">How to get started</h3>

<p>Since the Android NDK support depends on an experimental plugin, with an incompatible build file syntax which we know will change over the next few months, we have not added a simple way to create Android NDK projects. Instead, to explore the Android NDK support, either</p>

<ol>
  <li>
    <p>Follow the <a href="http://tools.android.com/tech-docs/new-build-system/gradle-experimental">Experimental Gradle Plugin</a> document which describes how to modify your project to use the current version of the experimental plugin, or</p>
  </li>
  <li>
    <p>Check out some of the existing Android NDK samples which have been updated to work with the new Gradle plugin.</p>
  </li>
</ol>

<p>To check out the samples, invoke VCS &gt; Checkout from Version Control &gt; Git, and in the resulting dialog point to <a href="https://github.com/googlesamples/android-ndk.git">https://github.com/googlesamples/android-ndk.git</a> . Pick a location to check out the samples into. <strong>NOTE:</strong> At the end of the import the IDE will ask you whether you want to create a project from the checked out sources. Answer no. The android-ndk git project contains a large number of separate projects. Instead, once the import is done, go to File &gt; Open…, and navigate to (for example) the Teapot folder and select the file build.gradle in that folder. The project will now be opened and synced. This will take a while the first time as the new Gradle plugin and dependencies are downloaded. When you’re done you can look at the project sources and start exploring the IDE support for Android NDK.</p>

<p>For example, in the Project View you’ll see that the project has a “jni” source set next to the normal “java” source set; that’s where you’ll find the native code:</p>

<p><img src="/images/notes_images/ndk-jni-folder.png" alt="ndk-jni-folder" /></p>

<p>You can now build &amp; run the project, and explore the various editing features:</p>

<ul>
  <li>Code completion</li>
  <li>Code navigation (go to declaration, jump between header and implementation, etc)</li>
  <li>Quick fixes</li>
  <li>Intentions</li>
  <li>Refactoring</li>
  <li>Source format
…</li>
</ul>

<p><img src="/images/notes_images/ndk-jni-editor-small.png" alt="ndk-jni-editor-small" /></p>

<h3 id="debugging">Debugging</h3>

<p>To debug the project, you’ll need to create a <strong>native</strong> run configuration. Invoke Run &gt; Edit Configurations…, then choose the Native configuration type:</p>

<p><img src="/images/notes_images/ndk-native.png" alt="ndk-native" /></p>

<p>Name the configuration, and choose the module to run. If you run into bugs with the LLDB debugger in this version of the IDE, you can try switching to the GDB debugger instead as a workaround.</p>

<p><img src="/images/notes_images/ndk-native2.png" alt="ndk-native2" /></p>

<p>原文链接：<a href="http://tools.android.com/tech-docs/android-ndk-preview">http://tools.android.com/tech-docs/android-ndk-preview</a></p>

<hr />
<p>版权声明：版权归原网站所有。</p>
]]></content>
  </entry>
  
</feed>
