<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AndroidDevWeekly | 脉脉不得语的技术博客]]></title>
  <link href="http://www.inferjay.com/blog/categories/androiddevweekly/atom.xml" rel="self"/>
  <link href="http://www.inferjay.com/"/>
  <updated>2015-01-05T09:05:16+08:00</updated>
  <id>http://www.inferjay.com/</id>
  <author>
    <name><![CDATA[inferjay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Android开发周报 Issue#13]]></title>
    <link href="http://www.inferjay.com/blog/2014/12/29/android-dev-weekly-issue-13/"/>
    <updated>2014-12-29T10:18:59+08:00</updated>
    <id>http://www.inferjay.com/blog/2014/12/29/android-dev-weekly-issue-13</id>
    <content type="html"><![CDATA[<h3 id="section">新闻</h3>
<ol>
  <li>
    <p><a href="http://www.infoq.com/cn/news/2014/12/oracle-java-jar-package">Oracle开始从Java运行时中移除JAR包</a></p>

    <p>早在2012年8月，在Java平台首席架构师Mark Reinhold宣布<a href="http://openjdk.java.net/projects/jigsaw/">模块化项目Jigsaw</a>之后不久，<a href="http://openjdk.java.net/jeps/162">JEP 162</a>这一题为“准备模块化”的提案就指出，在Jigsaw项目中为模块化系统开发的代码不会集成到JDK 8中。那次延期直接将模块化支持推迟到JDK 9，最早也得到2016年。</p>
  </li>
  <li>
    <p><a href="http://www.eoeandroid.com/thread-558758-1-1.html">android5.0让位，Android 6.0曝光这是神马情况？</a></p>

    <p>　Android 5.0刚和我们见面没多久，下一代操作系统Android 6.0就曝光了。外媒报道称，谷歌另一个开发小组已经着手进行一款代号为“M”的系统的研发工作，而这个“M”很有可能就是Android 6.0的代号。据猜测，Android 6.0最主要的变化将会是优化车载表现，可直接安装在汽车当中，这样用户无需智能手机即可直接控制汽车。</p>
  </li>
</ol>

<h3 id="section-1">教程</h3>

<ol>
  <li>
    <p><a href="http://www.cnblogs.com/ct2011/p/4183553.html">将Eclipse代码导入到AndroidStudio的两种方式</a></p>

    <p>说到使用AndroidStudio，除了新建的项目，我们都会面临的问题是原先Eclipse的代码该怎么导入到AndroidStudio中使用。Google为了让我们更加方便的使用AndroidStudio，提供了两种导入Eclipse代码的方式：一种兼容Eclipse，一种是全新的Android Gradle Project.</p>
  </li>
  <li>
    <p><a href="http://www.importnew.com/14227.html">Java 注解指导手册 – 终极向导</a></p>

    <p>在这篇文章中我们将阐述什么是Java注解，它们如何工作，怎么使用它们。我们将揭开Java注解的面纱，包括内建注解或称元注解，还将讨论Java8中与之相关的的新特性。最后，我们将实现自定义的注解，编写一个使用注解的处理程序（消费器），它通过java反射使用注解。</p>
  </li>
  <li>
    <p><a href="http://blog.jobbole.com/30940/">缓存、缓存算法和缓存框架简介</a></p>

    <p>我们都听过 cache，当你问他们是什么是缓存的时候，他们会给你一个完美的答案，可是他们不知道缓存是怎么构建的，或者没有告诉你应该采用什么标准去选择缓存框架。在这篇文章，我们会去讨论缓存，缓存算法，缓存框架以及哪个缓存框架会更好。</p>
  </li>
</ol>

<!--more-->

<ol>
  <li>
    <p><a href="http://www.infoq.com/cn/news/2014/12/qq-mobile-practice">手机QQ的移动化实践之路</a></p>

    <p>手机QQ的移动化实践之路】在刚刚结束的AS北京上，腾讯即时通讯平台部技术总监范瑞彬做了题为《手机QQ的移动化实践之路》的演讲，从移动环境的特点、如何做好接入、架构设计理念三个方面分享了手Q一路走来的诸多经验。演讲PPT下载：<a href="http://pan.baidu.com/s/1mgIDMtU">http://pan.baidu.com/s/1mgIDMtU</a></p>
  </li>
  <li>
    <p><a href="http://www.infoq.com/cn/news/2014/12/taobao-app-evolution">手机淘宝构架演化实践</a></p>

    <p>阿里心石：手机淘宝构架演化实践】在本届ArchSummit中，来自阿里无线事业部的高级专家李敏（花名心石 @allblue_华丽地低调 ）与我们分享了《手机淘宝架构演化实践》，畅谈阿里巴巴无线从开始之初到成为日活上亿级别电商应用技术变迁和积累。演讲PPT下载：<a href="http://pan.baidu.com/s/1kTgMfMv">http://pan.baidu.com/s/1kTgMfMv</a></p>
  </li>
  <li>
    <p><a href="http://www.testerhome.com/topics/1718">Gradle 学习专辑</a></p>

    <p>该学习专辑包含：gradle 初步构建（一）、Java Project Gradle Emma、Android Project Gradle jacoco、Android Gradle Espresso tests、自由的使用 gradle 构建你的应用、Groovy 初探（一）、gradle 集成修改 Android Manifest.xml 打多个包实践和Gradle 编译交互小技巧等，并且还在持续更新中。</p>
  </li>
  <li>
    <p><a href="http://tech.glowing.com/cn/dai-ma-gui-fan-he-androidxiang-mu-zhong-de-xie-ke-yong-gong-ju/">代码规范和Android项目中的一些可用工具</a></p>

    <p>这里主要讲一下关于代码规范的相关问题，和在Android项目中如何利用一些工具进行规范和检查。代码规范不是一个Android项目特有的问题，所以前部分内容是不单针对Android的。</p>
  </li>
  <li>
    <p><a href="http://stormzhang.gitcafe.com/devtools/2014/12/18/android-studio-tutorial4/">Android Studio系列教程四–Gradle基础</a></p>

    <p><a href="http://weibo.com/zhangqi8">googdev</a>结合Stduio 1.0正式版与最新的Gradle语法通过自己的开源项目 <a href="https://github.com/stormzhang/9GAG">9GAG</a> 讲解了Gradle相关的知识，后续会介绍一种我常用的快速方便的编译查看第三方开源项目的方法，如何导入Android Studio，Gradle常用基本命令，多渠道打包配置等。</p>
  </li>
  <li>
    <p><a href="http://top.jobbole.com/17733/">每个程序员至少阅读两次的 10 篇技术论文</a></p>

    <p>这10篇论文包括：编程语言中的基本概念、为什么函数式编程重要、计算机编程的公理基础、分布式系统中的时间、时钟和事件顺序、理解类型、数据抽象和多态、符号表达式的递归函数，及其机器计算等。</p>
  </li>
</ol>

<h3 id="section-2">代码&amp;开源库</h3>

<ol>
  <li>
    <p><a href="https://github.com/oli107/material-range-bar">MaterialRangeBar</a></p>

    <p>Android widget for selecting a range of values.</p>
  </li>
  <li>
    <p><a href="https://github.com/StanKocken/SVG2Drawable">SVG2Drawable</a></p>

    <p>Use a jar executable to create a Drawable class to display a SVG on Android.</p>
  </li>
  <li>
    <p><a href="https://github.com/kageiit/gradle-robojava-plugin">gradle-robojava-plugin</a></p>

    <p>Gradle plugin to integrate Robolectric tests into Android Studio。</p>
  </li>
  <li>
    <p><a href="https://github.com/westlinkin/AndroidLocalizationer">AndroidLocalizationer</a></p>

    <p>This is a Android Studio/ IntelliJ IDEA plugin to localize your Android app, translate your string resources automactically. <a href="https://plugins.jetbrains.com/plugin/7629">https://plugins.jetbrains.com/plugin/7629</a></p>
  </li>
  <li>
    <p><a href="https://github.com/telly/MrVector">MrVector</a></p>

    <p>AKA VectorDrawableCompat: A 14+ backport of VectorDrawable.</p>
  </li>
  <li>
    <p><a href="https://github.com/frogermcs/HelloMultidex">HelloMultidex</a></p>

    <p>Example project for multi-dex project in Android.</p>
  </li>
  <li>
    <p><a href="https://github.com/jasonpolites/gesture-imageview">gesture-imageview</a></p>

    <p>Implements pinch-zoom, rotate, pan as an ImageView for Android 2.1+.</p>
  </li>
  <li>
    <p><a href="https://github.com/nispok/slidingtabs">slidingtabs</a></p>

    <p>Gradle port of Google’s SlidingTabLayout to display a custom ViewPager title strip.</p>
  </li>
  <li>
    <p><a href="https://github.com/Malinskiy/SuperRecyclerView">SuperRecyclerView</a></p>

    <p>Pumped up RecyclerView.This is an attempt to make RecyclerView easier to use.</p>

    <p>Features built in:</p>

    <ul>
      <li>ProgressBar while adapter hasn’t been set</li>
      <li>EmptyView if adapter is empty</li>
      <li>SwipeRefreshLayout (Google’s one)</li>
      <li>Infinite scrolling, when you reach the X last item, load more of them.</li>
      <li>Swipe To Dismiss</li>
      <li>Sticky headers (via <a href="https://github.com/eowise/recyclerview-stickyheaders">Eowise</a>, see sample)</li>
    </ul>
  </li>
  <li>
    <p><a href="https://github.com/aicaprio/CurtainView">CurtainView</a></p>

    <p>An android view,which can layer on any gravity for swiping.</p>
  </li>
</ol>

<h3 id="section-3">工具</h3>

<ol>
  <li>
    <p>国内几个Android SDK镜像</p>

    <p>大连东软信息学院镜像服务器的地址: <code>http://mirrors.neusoft.edu.cn</code> 端口：80</p>

    <pre><code>北京化工大学镜像服务器的地址: 
1. IPv4: `http://ubuntu.buct.edu.cn/` 端口：80
2. IPv4: `http://ubuntu.buct.cn/`   端口：80
3. IPv6: `http://ubuntu.buct6.edu.cn/`  端口：80
</code></pre>

    <p>上海GDG镜像服务器地址:<code>http://sdk.gdgshanghai.com </code>  端口：8000</p>

    <p><strong>使用方法</strong>：</p>

    <ol>
      <li>启动 Android SDK Manager ，打开主界面，依次选择『<strong>Tools</strong>』、『<strong>Options…</strong>』，弹出『<strong>Android SDK Manager - Settings</strong>』窗口；</li>
      <li>在『<strong>Android SDK Manager - Settings</strong>』窗口中，在『<strong>HTTP Proxy Server」和「HTTP Proxy Port</strong>』输入框内填入上面镜像服务器地址和端口，并且选中『<strong>Force https://… sources to be fetched using http://…</strong>』复选框。设置完成后单击『<strong>Close</strong>』按钮关闭『<strong>Android SDK Manager - Settings</strong>』窗口返回到主界面；</li>
      <li>依次选择『<strong>Packages</strong>』、『<strong>Reload</strong>』。</li>
    </ol>
  </li>
  <li>
    <p><a href="https://github.com/mcxiaoke/gradle-packer-plugin">gradle-packer-plugin Android 多渠道打包工具</a></p>

    <p>gradle-packer-plugin 是Android多渠道打包工具Gradle插件，可方便的于自动化构建系统集成，通过很少的配置可实现如下功能 ：</p>

    <ul>
      <li>支持自动替换AndroidManifest文件中的meta-data字段实现多渠道打包</li>
      <li>支持自定义多渠道打包输出的存放目录和最终APK文件名</li>
      <li>支持自动修改versionName中的build版本号，实现版本号自动增长</li>
    </ul>
  </li>
  <li>
    <p><a href="https://gitter.im">Gitter.im</a></p>

    <p>Chat, for GitHub.</p>

    <p><img src="http://ww4.sinaimg.cn/bmiddle/005GSHYzjw1eniqp77z75j31kw0w74ii.jpg" alt="image" /></p>
  </li>
</ol>

<h3 id="section-4">视频</h3>

<ol>
  <li><a href="http://v.youku.com/v_show/id_XNTMzMjYzMzM2.html">阿里技术沙龙第十六期《android插件化及动态部署—ATLAS 》伯奎</a></li>
</ol>

<h3 id="section-5">设计</h3>

<h3 id="section-6">教程</h3>

<ol>
  <li>
    <p><a href="http://zhuanlan.zhihu.com/rijing/19845226">Sketch 制作扁平图标</a></p>

    <p>用Sketch一步一步教你制作扁平图标，步骤很详细</p>
  </li>
  <li>
    <p><a href="http://leonpd.lofter.com/post/20f397_4cb74d1">动效软件 Form 教程：概览与基础 patch 介绍</a></p>

    <p>都说产品设计师的设计可以用 Axure + Sketch + Origami三者联动，完成原型、视觉和动效的一条龙工作，前一段时间也抽空学习了一下 Quartz Composer（以下简称 QC） + Origami，虽然有一定的上手难度，但是确实能够做出非常逼真的效果。</p>
  </li>
</ol>

<hr />
<p>版权声明：欢迎自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发周报 Issue#12]]></title>
    <link href="http://www.inferjay.com/blog/2014/12/22/android-dev-weekly-issue-12/"/>
    <updated>2014-12-22T09:54:44+08:00</updated>
    <id>http://www.inferjay.com/blog/2014/12/22/android-dev-weekly-issue-12</id>
    <content type="html"><![CDATA[<h3 id="section">文章</h3>

<ol>
  <li>
    <p><a href="http://blog.csdn.net/luoshengyang/article/details/41822747">Dalvik虚拟机垃圾收集（GC）过程分析</a></p>

    <p>前面我们分析了Dalvivk虚拟机堆的创建过程，以及Java对象在堆上的分配过程。这些知识是理解Dalvik虚拟机垃圾收集过程的基础。垃圾收集是一个复杂的过程，它要将那些不再被引用的对象进行回收。一方面要求Dalvik虚拟机能够标记出哪些对象是不再被引用的。另一方面要求Dalvik虚拟机尽快地回收内存，避免应用程序长时间停顿。本文就将详细分析Dalvik虚拟机是如何解决上述问题完成垃圾收集过程的。</p>
  </li>
  <li>
    <p><a href="http://www.jianshu.com/p/c85984cf99e2?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=writer_share&amp;utm_source=weibo">使用Android Studio查看Android Lollipop源码</a></p>

    <p>作为Google的亲儿子,Nexus手机系列所收到的待遇大家有目共睹.Android5.0出来之后,Nexus5第一时间就升级到了最新的系统.那么作为Google亲儿子的Android Studio同样备受Google的重视,我也是第一时间从Eclipse转投到了Android Studio的怀抱中,从最初的测试版本一路升级到现在的1.0正式版本(今天发布了1.0.2,果断已经升级了),关于Android Studio的好处我就不用说了…</p>
  </li>
  <li>
    <p><a href="http://greenrobot.me/devnews/facebook-engineer-improve-android-app/">Facebook工程师是如何改进他们Android客户端的</a></p>

    <p>作为世界上最大的社交网络，Facebook的Android客户端面临着各种各样的使用环境（地理环境、Android设备以及移动网络等环境的差异）。也正是这个原因，为了检测自家Android客户端在发展中国家的性能表现，Android的产品经理、工程师在2013年的时候去了一趟非洲。当时我看到这个新闻的时候觉得有点怪异，后来看到他们这篇博客才有点理解他们这样做的原因了。</p>
  </li>
  <li>
    <p><a href="http://greenrobot.me/devpost/i-dont-need-your-permission/">你的Android应用完全不需要那么多的权限</a></p>

    <p>Android系统的权限从用户的角度来看有时候的确有点让人摸不着头脑。有时候可能你只需要做一些简单的事情（对联系人的信息进行编辑），却申请了远超你应用所需的权限（比如访问所有联系人信息的权限）。</p>
  </li>
</ol>

<!--more-->

<ol>
  <li>
    <p><a href="http://greenrobot.me/devpost/about-android-dex-method-number-limit/">关于 Android Dex 方法限制的一些总结</a></p>

    <p>在了解这个问题之前我们先要来看看Android 应用编译的过程:1. IDE中的资源打包工具 (Android Asset Packaging Tool ，即图中的aapt) 会将应用中的资源文件进行编译，这些资源文件包括 AndroidManifest.xml文件，为Activity定义的 XML 文件等等。在这个编译过程中也会产生一个 R.java 文件，这样你就可以在你的Java代码中引用这些资源了。</p>
  </li>
  <li>
    <p><a href="http://bobao.360.cn/learning/detail/122.html">安卓Hacking科普系列</a></p>

    <p>本系列科普文章包含：<a href="http://bobao.360.cn/learning/detail/122.html">Part 1: 应用组件攻防</a>、<a href="http://bobao.360.cn/learning/detail/127.html">Part 2: Content Provider攻防</a>、<a href="http://bobao.360.cn/learning/detail/126.html">Part 3：Broadcast Receivers攻防</a>、<a href="http://bobao.360.cn/learning/detail/133.html">Part 4:非预期的信息泄露（边信道信息泄露）</a>、<a href="http://bobao.360.cn/learning/detail/138.html">Part 5:使用JDB调试Java应用</a>、<a href="http://bobao.360.cn/learning/detail/140.html">Part 6：调试Android应用</a>、<a href="http://bobao.360.cn/learning/detail/142.html">Part 7:攻击WebView</a>、<a href="http://bobao.360.cn/learning/detail/144.html">Part 8:Root的检测和绕过</a>、<a href="http://bobao.360.cn/learning/detail/150.html">Part9: 不安全的本地存储：Shared Preferences</a>、<a href="http://bobao.360.cn/learning/detail/152.html">Part 10:不安全的本地存储</a>等，还在更新中。</p>
  </li>
</ol>

<h3 id="section-1">代码&amp;开源库</h3>

<ol>
  <li>
    <p><a href="https://github.com/golang/mobile">Go on Android</a></p>

    <p>The Go mobile repository holds packages and build tools for using Go on Android.</p>
  </li>
  <li>
    <p><a href="https://github.com/KeithYokoma/AccountAutoCompleteEditText">AccountAutoCompleteEditText</a></p>

    <p>Just a simple implementation for use of auto complete text view with device account suggestion.</p>
  </li>
  <li>
    <p><a href="https://github.com/pungrue26/SelectableRoundedImageView">SelectableRoundedImageView</a></p>

    <p>Android ImageView that supports different radiuses on each corner. It also supports oval(and circle) shape and border. This would be especially useful for using inside CardView which should be rounded only top left and top right corners(Don’t forget to call setPreventCornerOverlap(false) on your cardview).</p>
  </li>
  <li>
    <p><a href="https://github.com/ObjectLayout/ObjectLayout">ObjectLayout</a></p>

    <p>Java classes designed with optimizable object layout in mind 
<a href="http://objectlayout.github.com/ObjectLayout/">http://objectlayout.github.com/ObjectLayout/</a>。</p>
  </li>
  <li>
    <p><a href="https://github.com/glomadrian/MvpCleanArchitecture">MvpCleanArchitecture</a></p>

    <p>A sample project using Clean architecture and MVP in Android。</p>
  </li>
  <li>
    <p><a href="https://github.com/paveldudka/ViewStateSaveDemo">ViewStateSaveDemo</a></p>

    <p>Simple Demo of how do you save View’s state in Android。</p>
  </li>
  <li>
    <p><a href="https://github.com/jmolsmobile/LandscapeVideoCamera">LandscapeVideoCamera</a></p>

    <p>Powerful custom Android Camera with granular control over the video quality and filesize, restricting recordings to landscape only.</p>
  </li>
  <li>
    <p><a href="https://github.com/andkulikov/transitions-everywhere">transitions-everywhere</a></p>

    <p>Backport of Transitions API from Android KitKat and Lollipop. Compatible with Android 2.2+。</p>
  </li>
  <li>
    <p><a href="https://github.com/krschultz/android-proguard-snippets">android-proguard-snippets</a></p>

    <p>Example Proguard configurations for common Android libraries。</p>
  </li>
</ol>

<h3 id="section-2">工具</h3>

<ol>
  <li>
    <p><a href="http://tools.android.com/download/studio/canary/1-0rc4">Android Studio 1.0.2</a></p>

    <p><strong>墙内下载地址：</strong><a href="http://www.androiddevtools.cn/#android-studio">http://www.androiddevtools.cn/#android-studio</a>	 	 </p>
  </li>
</ol>

<h3 id="section-3">视频</h3>

<ol>
  <li>
    <p><a href="http://v.youku.com/v_show/id_XODUxODEzMDQ4.html?f=23217955">Android DevBytes</a></p>

    <p>墙内DevBytes视频更新啦！包括最新的《Android Vector Graphics》（难得有个华裔面孔！）、《Introducing Route 85》（Google面向iOS开发即将推出一系列视频）以及Auto和Wear（有车有表！）</p>
  </li>
</ol>

<h3 id="section-4">设计</h3>

<h4 id="section-5">工具</h4>

<ol>
  <li>
    <p><a href="http://www.materialpalette.com">Material Design Color Palette Generator - Material Palette</a></p>

    <p>一个可以快速搭配Material Design主题颜色的并且提供下载的在线网站.</p>
  </li>
  <li>
    <p><a href="https://github.com/t32k/material-design-color-palette-sketch-plugin">material-design-color-palette-sketch-plugin</a></p>

    <p>Sketch app plugin for displaying Google material design color palette.</p>
  </li>
</ol>

<hr />
<p>版权声明：欢迎自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发周报 Issue#11]]></title>
    <link href="http://www.inferjay.com/blog/2014/12/15/android-dev-weekly-issue-11/"/>
    <updated>2014-12-15T13:56:36+08:00</updated>
    <id>http://www.inferjay.com/blog/2014/12/15/android-dev-weekly-issue-11</id>
    <content type="html"><![CDATA[<h3 id="section">文章</h3>

<ol>
  <li>
    <p><a href="http://droidyue.com/blog/2014/11/29/why-onsharedpreferencechangelistener-was-not-called/">Google为何这样设计OnSharedPreferenceChangeListener</a></p>

    <p>之前使用OnSharedPreferenceChangeListener，遇到了点小问题，就是有些时候OnSharedPreferenceChangeListener没有被触发。最近花了点时间研究了一下，小做整理。本文将会介绍监听器不被触发的原因，解决方法，以及其中隐含的一些技术细节。</p>
  </li>
  <li>
    <p><a href="http://blog.isming.me/2014/12/12/import-library-to-android-studio/">导入开源库到基于Android Studio构建的项目中</a></p>

    <p>前两天，谷歌发布了Android Studio 1.0的正式版，也有更多的人开始迁移到Android Studio进行开发。然而，网上很多的开源库,控件等还是以前的基于Eclipse进行开发，很多人不知道怎么导入到自己的基于Android Studio项目中来，微博上也有人私信我，让我来写写，正好今天回来的比较早，就写写吧。主要介绍一下常见的一些导包的场景。</p>
  </li>
  <li>
    <p><a href="http://www.cnblogs.com/ct2011/p/4152323.html">Android批量打包提速 - 1分钟900个市场不是梦</a></p>

    <p>使用Ant或者Gradle来给程序进行多渠道批量打包，通常都是在manifest文件中写入一个meta标签：<code>&lt;meta-data android:name="CHANNEL" android:value="xxx" /&gt;</code> meta的key值固定，通过循环改变meta中的value值来实现市场渠道的写入。Ant批量打包实现相对麻烦，以前写的时候多亏了<a href="http://www.cnblogs.com/qianxudetianxia/archive/2012/07/04/2573687.html">谦虚的天下-《App自动化之使用Ant编译项目多渠道打包》</a> 。如果没有这篇帖子，真不知道当时Ant要折腾多少回才能写好。</p>
  </li>
  <li>
    <p><a href="http://blog.csdn.net/maosidiaoxian/article/details/41692535">上传Android或Java库到Maven central repository</a></p>

    <p>主要介绍利用Sonatype将jar或aar提交到Maven的中央仓库。是不是希望将自己的jar或是aar传到maven官方库中，在The Central Repository中可以被其他人搜索使用呢，是的话，往下看吧。</p>
  </li>
</ol>

<!--more-->

<ol>
  <li>
    <p><a href="http://greenrobot.me/devpost/android-custom-layout/">深入解析Android的自定义布局</a></p>

    <p>这篇文章是前Firefox Android工程师（现在跳槽去Facebook了） Lucas Rocha所写，文中对Android中常用的四种自定义布局方案进行了很好地分析，并结合这四种Android自定义布局方案所写的示例项目讲解了它们各自的优劣以及四种方案之间的比较。</p>
  </li>
  <li>
    <p><a href="http://greenrobot.me/devpost/java-faster-less-jvm-garbage/">Linkedin工程师是如何优化他们的Java代码的</a></p>

    <p>最近在刷各大公司的技术博客的时候，我在Linkedin的技术博客上面发现了一篇很不错博文。这篇博文介绍了Linkedin信息流中间层Feed Mixer，它为Linkedin的Web主页，大学主页，公司主页以及客户端等多个分发渠道提供支撑（如下图所示）。</p>
  </li>
  <li>
    <p><a href="http://blog.csdn.net/column/details/android5.html">跟着ym学习Android5.0</a></p>

    <p>跟着作者一步步学习Android 5.0开发。从创建模拟器开始，再到Material主题、Palette、AnimatedVectorDrawable、RecyclerView、CardView、Activity过渡动画、如何定义阴影等。</p>
  </li>
  <li>
    <p><a href="http://qichaochen.github.io/2014/12/08/108-Android-Toolbar-DrawerLayout-01/">[Material Design]使用Toolbar + DrawerLayout快速实现高大上菜单侧滑</a></p>

    <p>如果你有在关注一些遵循最新的Material Design设计规范的应用的话（如果没有，假设你有！），也许会发现有很多使用了看起来很舒服、很高大上的侧滑菜单动画效果。</p>
  </li>
  <li>
    <p><a href="http://www.dgtle.com/article-5885-1.html">安卓中的 Cydia — Xposed 框架插件专题</a></p>

    <p>大名鼎鼎的 Xposed，相信不少经常泡在各类安卓论坛的安卓粉们都听说过。在安卓进入 4.0 的时代后，不少“大神”也都会在自己做的 Rom 中添加这个 Xposed 软件。</p>
  </li>
</ol>

<h3 id="section-1">代码&amp;开源库</h3>

<ol>
  <li>
    <p><a href="https://github.com/chrisbatt/AndroidFastImageProcessing">AndroidFastImageProcessing</a></p>

    <p>A framework for speeding up image processing on android devices by taking advantage of shaders on the GPU.	</p>
  </li>
  <li>
    <p><a href="https://github.com/stephanenicolas/loglifecycle">loglifecycle</a></p>

    <p>Logs all lifecycle methods of annotated Activities, Fragments, Services, Views, etc.</p>
  </li>
  <li>
    <p><a href="https://github.com/Narfss/ParallaxEverywhere">ParallaxEverywhere</a></p>

    <p>Parallax everywhere is a library with alternative android widgets with parallax effects.</p>
  </li>
  <li>
    <p><a href="https://github.com/adnan-SM/TimelyTextView">TimelyTextView</a></p>

    <p>Animated TextView like Timely app.</p>
  </li>
  <li>
    <p><a href="https://github.com/Manabu-GT/ExpandableTextView">ExpandableTextView</a></p>

    <p>ExpandableTextView是一个可以使开发人员能够轻松地创建可扩展/折叠的TextView效果，就像Google Play里用于显示App描述的TextView一样.</p>
  </li>
  <li>
    <p><a href="https://github.com/googlesamples">Google Samples</a></p>

    <p>Google在Github上发布了大量Demo，针对不同的特性，也包含了最新的API 21 (Lollipop).</p>
  </li>
</ol>

<h3 id="section-2">工具</h3>

<ol>
  <li>
    <p><a href="http://tools.android.com/download/studio/canary/1-0rc4">Android Studio 1.0正式版发布啦</a></p>

    <p><strong>墙内下载地址：</strong><a href="http://www.androiddevtools.cn/#android-studio">http://www.androiddevtools.cn/#android-studio</a>	 	 </p>
  </li>
  <li>
    <p><a href="https://github.com/airk000/gologcat">gologcat</a></p>

    <p>一个由golang编写，可以在终端中彩色输出logcat的实用工具，支持自定义颜色。</p>
  </li>
  <li>
    <p><a href="http://inloop.github.io/shadow4android/">Android 9-patch shadow generator</a></p>

    <p>Android点9图片阴影生成器。</p>
  </li>
</ol>

<h3 id="section-3">视频</h3>

<ol>
  <li>
    <p><a href="http://v.youku.com/v_show/id_XODQ1MjI2MDQ0.html?f=23088492">精通Android触摸系统(中英字幕)</a></p>

    <p><a href="http://www.weibo.com/oceancx?from=feed&amp;loc=nickname">@Ocean-藏心</a>同学历经3周的翻译,将1小时18分钟的视频,终于完成了. 简介:<a href="http://t.cn/RzxZs6E">的姊妹篇</a>，详细讲解了Android自定义事件处理的方方面面。配合<a href="http://blog.csdn.net/guolin_blog/">guolin</a> 大神CSDN的博客和上一个视频，让你对开发Android 自定义控件游刃有余。此外还有<a href="http://">@Trinea</a>大神的<a href="http://www.trinea.cn/android/touch-event-delivery-mechanism/">Android Touch事件传递机制</a>简略解读。</p>

    <p>视频中用到的PPT(PDF版)下载地址：<a href="http://wugengxin.cn/download/pdf/android/PRE_andevcon_mastering-the-android-touch-system.pdf">http://wugengxin.cn/download/pdf/android/PRE_andevcon_mastering-the-android-touch-system.pdf</a></p>
  </li>
  <li>
    <p><a href="http://www.jikexueyuan.com/course/396.html">Android Studio 1.0 (稳定版)的使用</a></p>

    <p>经过 2 年时间的研发，Google 终于在近日正式发布了面向 Android 开发者的集成开发环境 Android Studio 1.0（稳定版）。Android Studio 是 Google 开发的一款面向 Android 开发者的 IDE，支持 Windows、Mac、Linux 等操作系统，基于流行的 Java 语言集成开发环境 IntelliJ 搭建而成。该 IDE 在 2013 年 5 月的 Google I/O 开发者大会上首次露面，此间推出了若干个测试版，12 月 8 日发布的版本是 Android Studio 的首个稳定版。Google 称，相对于其他开发工具，Android Studio 更快、更具生产力，Android Studio 1.0 推出后，Google 将逐步放弃对原来主要的 Android 开发工具 Eclipse ADT 的支持。</p>
  </li>
</ol>

<h3 id="section-4">设计</h3>

<h4 id="section-5">文章</h4>

<ol>
  <li>
    <p><a href="http://www.jianshu.com/p/a3b2422b5465?utm_campaign=hugo&amp;utm_medium=reader_share&amp;utm_content=note&amp;utm_source=weibo">关于Material Design，做到这四点便足以让用户惊喜</a></p>

    <p>Material Design 主张将现实世界中的交互体验，应用到界面设计中来，以求用户的经验能够迁移，并更快习惯新系统。Teambition 已经根据 Material Design 重新设计了旗下所有的 Android 客户端产品。在实践过程中，设计和产品团队总结了一些值得分析的要点，与大家分享。</p>
  </li>
  <li>
    <p><a href="http://www.cocoachina.com/special/design/">给程序员的设计学习指南</a></p>

    <p>这是给 移动开发者 准备的设计学习指南。在这里你将接触到三大平台的设计规范、基础设计理论，以及设计实践，还有一些学习设计的资源。程序员为什么需要学习设计？理解设计能让程序员更上一层楼，能让TA与设计师的交流协作更高效愉快，甚至拥有独立开发面向大众的APP的能力。 <a href="http://www.cocoachina.com/programmer/20141113/10214.html">《程序员需要学习设计的5大理由》</a>。</p>
  </li>
  <li>
    <p><a href="http://zhuanlan.zhihu.com/zhezhexiong/19565895">[无线手册-4] dp、sp、px傻傻分不清楚[完整]</a></p>

    <p>做移动设计的同学，不管是原生app或者web app，应该对字体字号都是很头痛的问题。根本原因是，我们用唯一分辨率的电脑，设计各个不同尺寸大小分辨率的设备，那简直要疯掉了。 <a href="http://zhuanlan.zhihu.com/zhezhexiong/1956455">[无线手册-2]不得不说的icon-font</a> 	<a href="http://zhuanlan.zhihu.com/zhezhexiong/1956）4893">[无线手册-3] 移动App上的动画们</a></p>
  </li>
</ol>

<h4 id="section-6">资源</h4>

<ol>
  <li>
    <p><a href="http://www.androidicons.com/">250 free icons in 5 sizes and 14 colors</a></p>

    <p>包含5种尺寸和14种颜色的250个免费icons。</p>
  </li>
</ol>

<hr />
<p>版权声明：欢迎自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发周报 Issue#10]]></title>
    <link href="http://www.inferjay.com/blog/2014/12/08/android-dev-weekly-issue-10/"/>
    <updated>2014-12-08T11:10:12+08:00</updated>
    <id>http://www.inferjay.com/blog/2014/12/08/android-dev-weekly-issue-10</id>
    <content type="html"><![CDATA[<h3 id="section">文章</h3>

<ol>
  <li>
    <p><a href="http://blog.csdn.net/maosidiaoxian/article/details/41692535">Android Apk 拆分机制</a></p>

    <p>拆分机制比起使用 flavors，能让应用程序更有效地构建一些形式的多个apk。多 apk 只支持以下类型: 1.
屏幕密度 2.ABI.使用新的拆分机制，构建同一个应用程序的hdpi版本和mdpi版本，能够共享很多的任务 （如 javac，dx，proguard）。此外，它会被认为是一个单一的variant，并且同一个测试程序将会被用来测试每​​个多APK。</p>
  </li>
  <li>
    <p><a href="http://relex.me/using-manifestplaceholders/">使用manifestPlaceholders</a></p>

    <p>在项目中我需要打包不同渠道的APK，需要在AndroidManifest中定义渠道名称，以便在java中调用。以前ant或gradle打包时动态改变渠道的思路是：正则AndroidManifest的特定字符然后替换.</p>
  </li>
  <li>
    <p><a href="http://blog.csdn.net/xushuaic/article/details/40424379">Property Anim详解</a></p>

    <p>本篇文章将对PropertyAnimation进行全面深入的探讨，本篇文章可以分为两大块，从第六部分可以作为分界点。前五部分着重讲解了PropertyAnim的动画值的计算过程，ValueAnimator与ObjectAnimator以及TimeInterpolation与TypeEvaluator之间的介绍和比较，这几点是比较重要的，从第六部分开始是通过源码的角度分析了整个动画计算以及内部的处理细节，以及引出了对JakeWharton大神的NineOldAndroids 开源库的分析，如果你觉得太多，可以分开来看，有理解不准确的地方，欢迎大家指正。</p>
  </li>
</ol>

<!--more-->

<ol>
  <li>
    <p><a href="http://stormzhang.com/posts.html#AndroidStudio">Android Studio系列教程</a></p>

    <p>相信大家对Android Studio已经不陌生了，Android Studio是Google于2013 I/O大会针对Android开发推出的新的开发工具，目前很多开源项目都已经在采用，Google的更新速度也很快，明显能感觉到这是Android开发的未来，那么我们还有什么理由不去拥抱未来呢？虽然推出了很久，但是国内貌似普及的程度并不高，鉴于很多朋友求studio的详细教程，那么今天我就手把手教大家下载、安装、使用，Studio之路从这里开始。</p>
  </li>
  <li>
    <p><a href="http://blog.csdn.net/luoshengyang/article/details/41581063">Dalvik虚拟机Java堆创建过程分析</a></p>

    <p>使用C/C++开发应用程序最令头痛的问题就是内存管理。慎不留神，要么内存泄漏，要么内存破坏。虚拟机要解决的问题之一就是帮助应用程序自动分配和释放内存。为了达到这个目的，虚拟机在启动的时候向操作系统申请一大块内存当作对象堆。之后当应用程序创建对象时，虚拟机就会在堆上分配合适的内存块。而当对象不再使用时，虚拟机就会将它占用的内存块归还给堆。Dalvik虚拟机也不例外，本文就分析它的Java堆创建过程。</p>
  </li>
</ol>

<h3 id="section-1">代码&amp;开源库</h3>

<ol>
  <li>
    <p><a href="https://github.com/googlesamples">Google Samples</a></p>

    <p>Google在Github上发布了大量Demo，针对不同的特性，也包含了最新的API 21 (Lollipop),学习的好资料/</p>
  </li>
  <li>
    <p><a href="https://github.com/Rogero0o/MatchView">MatchView</a></p>

    <p>TextView中的文字由类似火柴棍分散组合的效果。</p>

    <p><img src="https://camo.githubusercontent.com/a71e9d26a7f90ea70270b3681d99785a29f83be5/687474703a2f2f7777312e73696e61696d672e636e2f6d773639302f6136393561636465677731656d79746e6b347334356732306567306d6b3439302e676966" alt="image" /></p>
  </li>
  <li>
    <p><a href="https://github.com/Musenkishi/wally">Wally</a></p>

    <p>Wally is a fast and efficient open source wallpaper application for Android.</p>
  </li>
  <li>
    <p><a href="https://github.com/kyze8439690/FolderLayout">FolderLayout</a></p>

    <p>A layout like a stack of files and you can choose one to open. Just imitate the UI of Tencent’s QQ手机管家.</p>
  </li>
  <li>
    <p><a href="https://github.com/Malinskiy/android-material-icons">android-material-icons</a></p>

    <p>一个让你方便的在Android开发中使用Google发布出来的Material Design风格图标的库。	</p>
  </li>
  <li>
    <p><a href="https://github.com/quiqueqs/BabushkaText">BabushkaText</a></p>

    <p>A simpler way to style your TextViews</p>

    <p><img src="https://github.com/quiqueqs/BabushkaText/raw/master/images/example.png" alt="image" /></p>
  </li>
</ol>

<h3 id="section-2">工具</h3>

<ol>
  <li>
    <p><a href="http://www.chinagdg.com/thread-6053-1-1.html">Google 技术资源离线版</a></p>

    <p>Google 发布了一套4张 DVD，将 Google Developers 上的在线技术文档和视频打包到离线文件中。内容很丰富，如 Android 官方文档和SDK、Google Cloud 文档和视频、Web Fundamentals 文档、I/O 大会和 Dev Bytes 视频、Google Udacity 课程视频 等等。</p>
  </li>
  <li>
    <p><a href="http://tools.android.com/download/studio/canary/1-0rc4">Android Studio 1.0 Release Candidate 4</a></p>

    <p><strong>墙内下载地址：</strong><a href="http://www.androiddevtools.cn/#android-studio">http://www.androiddevtools.cn/#android-studio</a></p>
  </li>
</ol>

<h3 id="section-3">设计</h3>

<h4 id="section-4">文章</h4>

<ol>
  <li>
    <p><a href="http://www.ui.cn/project.php?id=33849">中国移动应用设计趋势解读</a></p>

    <p>铺天盖地的二维码、丧心病狂的小红点，还有繁花似锦的安卓ROMs…</p>

    <p>——老外对中国式App设计趋势的分析  by  Dan Grover (微信产品经理) </p>
  </li>
</ol>

<hr />
<p>版权声明：欢迎自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android开发周报 Issue#9]]></title>
    <link href="http://www.inferjay.com/blog/2014/12/01/android-dev-weekly-issue-9/"/>
    <updated>2014-12-01T12:42:08+08:00</updated>
    <id>http://www.inferjay.com/blog/2014/12/01/android-dev-weekly-issue-9</id>
    <content type="html"><![CDATA[<h3 id="section">文章</h3>

<ol>
  <li>
    <p><a href="http://blog.csdn.net/luoshengyang/article/details/41581063">Dalvik虚拟机Java堆创建过程分析</a></p>

    <p>使用C/C++开发应用程序最令头痛的问题就是内存管理。慎不留神，要么内存泄漏，要么内存破坏。虚拟机要解决的问题之一就是帮助应用程序自动分配和释放内存。为了达到这个目的，虚拟机在启动的时候向操作系统申请一大块内存当作对象堆。之后当应用程序创建对象时，虚拟机就会在堆上分配合适的内存块。而当对象不再使用时，虚拟机就会将它占用的内存块归还给堆。Dalvik虚拟机也不例外，本文就分析它的Java堆创建过程。</p>
  </li>
  <li>
    <p><a href="http://www.kuqin.com/shuoit/20140826/341828.html?url_type=39&amp;object_type=crawler&amp;pos=1">为什么Android的图片质量会比iPhone的差？</a></p>

    <p>经常看到有人问：“安卓版微信发出去的图片怎么那么渣！比iPhone的差远了！”。不只是微信，很多应用安卓版的图片质量就是要比iPhone版逊色很多，这到底是怎么回事？</p>
  </li>
  <li>
    <p><a href="http://qichaochen.github.io/2014/11/21/107-Facebook-Rebound-Demo/">[Material Design]使用Fackbook Rebound快速实现弹簧动画效果</a></p>

    <p>Rebound是Facebook推出的一款Android的物理和动画库，于2013年10月在Mobile@Scale大会上正式发布，旨在解决笨重、缓慢的传统移动网络界面。Rebound不是一款通用物理库，但其弹簧模型在应用程序中引入了现实世界的物理，易于集成，创建的动画能够让人感觉到非常自然，并且可以和Material Design的设计原则呼应，可用于滚动条、切换开关、呼叫等场景下。</p>
  </li>
  <li>
    <p><a href="http://stormzhang.com/devtools/2014/11/07/use-curl-debug/">使用curl来调试你的应用</a></p>

    <p>我们在客户端开发过程中总免不了和后端进行api对接，有时候需要对返回的数据格式进行调试，有时候每次运行客户端来发送请求，这个未免效率太低，这里就来介绍一个好用的工具–curl。</p>
  </li>
</ol>

<!--more-->

<ol>
  <li>
    <p><a href="http://www.codeceo.com/article/android-taskaffinity.html">Android taskAffinity属性使用详解</a></p>

    <p>Activity的归属，也就是Activity应该在哪个Task中，Activity与Task的吸附关系。我们知道，一般情况下在同一个应用中，启 动的Activity都在同一个Task中，它们在该Task中度过自己的生命周期，这些Activity是从一而终的好榜样。</p>
  </li>
  <li>
    <p><a href="http://www.codeceo.com/article/android-memory-manage.html">每个Android开发者必须知道的内存管理知识</a></p>

    <p>相信一步步走过来的Android从业者，每个人都会遇到OOM的情况。如何避免和防范OOM的出现，对于每一个程序员来说确实是一门必不可少的能力。今天我们就谈谈在Android平台下内存的管理之道，开始今天的主题之前，先再次回顾两个概念。</p>
  </li>
</ol>

<h3 id="section-1">代码&amp;开源库</h3>

<ol>
  <li>
    <p><a href="https://github.com/liaohuqiu/android-Ultra-Pull-To-Refresh">android-Ultra-Pull-To-Refresh</a></p>

    <p>很炫的下拉刷新效果库。</p>

    <p><img src="https://camo.githubusercontent.com/588a2ef2cdcfb6c71e88437df486226dd15605b3/687474703a2f2f737261696e2d6769746875622e71696e6975646e2e636f6d2f756c7472612d7074722f73746f72652d686f7573652d737472696e672d61727261792e676966" alt="image" /></p>
  </li>
  <li>
    <p><a href="https://github.com/AnderWeb/discreteSeekBar">discreteSeekBar</a></p>

    <p><img src="https://camo.githubusercontent.com/e717e2597779d1ddc980ace6f3943f62483d8a8c/68747470733a2f2f6c68332e676f6f676c6575736572636f6e74656e742e636f6d2f2d376e62565058785568596b2f56472d724f3634704d57492f414141414141414148734d2f614d52676c7432567a726b2f773633392d683438302f616e696d6174696f6e2e676966" alt="image" /></p>
  </li>
  <li>
    <p><a href="https://github.com/frogermcs/InstaMaterial">InstaMaterial</a></p>

    <p>Material Design风格的Instagram的客户端。</p>
  </li>
  <li>
    <p><a href="https://github.com/pnikosis/materialish-progress">materialish-progress</a></p>

    <p>Material Design风格的圆形进度条，最低支持到2.3的系统。</p>

    <p><img src="https://github.com/pnikosis/materialish-progress/raw/master/spinningwheel.gif" alt="image" /></p>
  </li>
  <li>
    <p><a href="https://github.com/inaka/galgo">galgo</a></p>

    <p>Android日志工具库，可以把log显示在屏幕上。</p>

    <p><img src="https://camo.githubusercontent.com/1e2d3b204a0898b697876817cc19ab4a2fef5de2/687474703a2f2f6936312e74696e797069632e636f6d2f327177336279302e676966" alt="image" /></p>
  </li>
  <li>
    <p><a href="https://github.com/cookpad/puree-android">puree-android</a></p>

    <p>一个Log日志收集框架。</p>
  </li>
  <li>
    <p><a href="https://github.com/gdpancheng/LoonAndroid">LoonAndroid</a></p>

    <p>一个ioc（依赖注入）框架，但是整个框架式不同于androidannotations，Roboguice等ioc框架，这是一个类似spring的实现方式。在整应用的生命周期中找到切入点，然后对activity的生命周期进行拦截，然后插入自己的功能。</p>
  </li>
</ol>

<h3 id="section-2">工具</h3>

<ol>
  <li>
    <p><a href="http://tools.android.com/download/studio/canary/1-0rc2">Android Studio 1.0 Release Candidate 2</a></p>

    <p>本次Release没有添加什么新的特性，只是修复了一些Bug，如果你之前已经升级到了RC1建议更新到RC2版。另外本次Release还针对Windows用户推出了包含SDK的安装包。</p>

    <p><strong>墙内下载地址：</strong><a href="http://www.androiddevtools.cn/#android-studio">http://www.androiddevtools.cn/#android-studio</a></p>
  </li>
</ol>

<h3 id="section-3">设计</h3>

<h4 id="section-4">文章</h4>

<ol>
  <li>
    <p><a href="http://www.oschina.net/news/57379/what-is-good-ui-design#0-tsina-1-76379-397232819ff9a47a7b7e80a40613cfe1">什么才是优秀的用户界面设计</a></p>

    <p>本文分享一些 Good UI 在一些项目中获取的设计以及运营策略等方面的经验。Good UI 是一家研究用户体验的设计机构。我们知道成功的页面设计不仅有很高的转化率更便于用户使用，既能满足商业目标更能为用户带来良好的体验。</p>
  </li>
  <li>
    <p><a href="https://medium.com/sebs-top-tips/material-navigation-drawer-sizing-558aea1ad266">Material Navigation Drawer sizing</a></p>

    <p>本文分析了Material的抽屉导航的大小到底多少才最符合设计规范和美观。</p>
  </li>
</ol>

<h4 id="section-5">素材</h4>

<ol>
  <li>
    <p><a href="https://dribbble.com/shots/1683873-Android-L-GUI-KIT">Android L GUI KIT</a></p>

    <p>Android L GUI KIT。</p>
  </li>
</ol>

<h4 id="section-6">工具</h4>

<ol>
  <li>
    <p><a href="http://oven.chrometaphore.com">OVEN</a></p>

    <p>A BETTER ASSETS WORKFLOW For Photoshop CC / 2014。</p>

    <p><img src="http://oven.chrometaphore.com/assets/oven_panel_screenshot@2x.png" alt="image" /></p>
  </li>
</ol>

<hr />
<p>版权声明：欢迎自由转载-非商用-非衍生-保持署名 | <a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></p>
]]></content>
  </entry>
  
</feed>
